name: Deploy to Google Cloud

on:
  push:
    branches:
      - main  # Trigger the pipeline when pushing to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu environment

    steps:
    # Step 1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Authenticate to Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}  # GitHub secret with your service account credentials

    # Step 3: Set up Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}  # Your Google Cloud project ID


    # Step 4: Authenticate Docker to GCR (Google Container Registry)
    - name: Authenticate Docker to GCR
      run: |
        gcloud auth configure-docker gcr.io
    # Step 5: Build and push the Docker image to GCR
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/rest-api-example:latest .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/rest-api-example:latest
        
    # Step 5: Build and push the Docker image to GCR
    - name: Deploy to Cloud Run
      run: |
          gcloud run deploy rest-api-example \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/rest-api-example:latest \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \          
            --allow-unauthenticated 

#    # Use gcloud SQL Proxy
#   - name: Google cloud SQL Proxy
#      uses: ahmadnassri/action-google-cloud-sql-proxy@v1
#     with:
#        key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
#        connection: ${{ secrets.GCP_CLOUD_SQL_INSTANCE }}
#        port: ${{ secrets.DB_PORT }}
#       
#    - name: Wait for Cloud SQL Proxy to be ready
#      run: |
#          sleep 10 
#
#    # Install dependencies
#    - name: Install Dependencies
#      run: |
#        npm install
#
#    # Run Knex Migrations
#    - name: Run Knex Migrations
#      run: |
#        npx knex migrate:latest --env production
#      env:
#        DB_HOST: localhost
#        DB_PORT: ${{ secrets.DB_PORT }}
#        DB_USER: ${{ secrets.DB_USER }}
#        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#        DB_NAME: ${{ secrets.DB_NAME }}
